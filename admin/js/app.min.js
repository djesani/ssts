
// declare modules
angular.module('Authentication', []);

angular
    .module('adminApp', [
        'ui.bootstrap',
        'ngAnimate',
        'ngSanitize',
        'ngCookies',
        'ngFileUpload',
        'ui.router',
        'Authentication'
    ]
    );

angular
    .module('adminApp')
    .run(['$rootScope', '$location', '$cookies', '$http',
        function ($rootScope, $location, $cookies, $http) {
            // keep user logged in after page refresh
            $rootScope.globals = $cookies.get('globals') || {};
            if ($rootScope.globals.currentUser) {
                $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authdata; // jshint ignore:line
            }

            $rootScope.$on('$locationChangeStart', function (event, next, current) {
                // redirect to login page if not logged in
                if ($location.path() !== '/login' && !$rootScope.globals.currentUser) {
                    $location.path('/login');
                    // $state.go('admin.login');
                }
            });
        }]);
'use strict';

angular.module('adminApp')
    .config(function ($stateProvider) {
        $stateProvider
            .state('admin', {
                abstract: true,
                url: '',
            })
            .state('admin.login', {
                url: '/login',
                controller: 'LoginController',
                controllerAs: 'vm',
                templateUrl: 'app/modules/authentication/authentication.html',
            })
    });

angular
    .module('adminApp')
    .constant('apiUrl', '/admin');

angular
    .module('adminApp')
    .controller('FileUpload', function ($scope, Upload, $timeout) {
        $scope.uploadPic = function (file) {
            file.upload = Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                data: { file: file },
            });

            file.upload.then(function (response) {
                $timeout(function () {
                    file.result = response.data;
                });
            }, function (response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
            }, function (evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        }
    });


angular
    .module('adminApp')
    .directive('inverted', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (val) { return !val; });
                ngModel.$formatters.push(function (val) { return !val; });
            }
        };
    });
angular.module('adminApp')
    .directive("jqueryUiDatepicker", function () {
        return {
            restrict: "A",
            require: "ngModel",
            link: function (scope, element, attrs, ngModelController) {
                var updateModel = function (dateText) {
                    scope.$apply(function () {
                        ngModelController.$setViewValue(dateText);
                    });
                };
                var options = {
                    dateFormat: "dd M yy",
                    changeMonth: true,
                    changeYear: true,
                    onSelect: function (dateText) {
                        updateModel(dateText);
                    }
                };
                element.datepicker(options);
            }
        }
    });

angular.module('adminApp')
    .directive('formattedDate', function (dateFilter) {
        return {
            require: 'ngModel',
            scope: {
                format: "="
            },
            link: function (scope, element, attrs, ngModelController) {
                ngModelController.$parsers.push(function (data) {
                    //convert data from view format to model format
                    return dateFilter(data, scope.format); //converted
                });

                ngModelController.$formatters.push(function (data) {
                    //convert data from model format to view format
                    return dateFilter(data, scope.format); //converted
                });
            }
        }
    });

angular.module('adminApp')
    .filter('dateFormat', function ($filter) {
        var angularDateFilter = $filter('date');
        return function (theDate) {
            return angularDateFilter(theDate, 'dd MMM yyyy');
        }
    });
'use strict';

angular.module('adminApp')
    .factory('uploadService', function ($http, apiUrl) {

        // Public API here
        return {
            postFile: postFile
        }

        function postFile(file) {
            var getUrl = apiUrl + '/' + 'fileupload';
            console.log('POST ' + getUrl);
            console.log('POST file ' + event);
            console.log(file);

            return $http.post(getUrl, file).then(function (response) {
                console.log('POST file response ' + response.data);
            })
        }

    });


'use strict';

angular.module('adminApp')
    .controller('EventsAddCtrl', function ($state, $stateParams, eventsService, eventsData) {

        var vm = this;
        vm.save = save;
        vm.cancel = cancel;
        vm.forms = {};
        vm.view = {};
        vm.view.edit = true;
        vm.event = {};

        function save(event) {

            var saveEvent = event;

            var startDateString = saveEvent.startDate;
            saveEvent.startDate = new Date(startDateString).getTime();

            var endDateString = saveEvent.endDate;
            saveEvent.endDate = new Date(endDateString).getTime();

            saveEvent.imageurl = saveEvent.imageurl.name;

            if (vm.forms.form.$valid) {
                eventsService.postEvent(saveEvent).then(function (saveEvent) {
                    eventsData = eventsData || [];
                    eventsData.push(saveEvent);
                    $state.go('events.list');
                });
            }
        }

        function cancel() {
            $state.go('events.list', {
                id: $stateParams.id
            });
        }

    });


'use strict';

angular.module('adminApp')
    .controller('EventsEditCtrl', function ($state, $stateParams, eventsService, eventsData, uploadService) {

        var vm = this;
        vm.save = save;
        vm.cancel = cancel;
        vm.deleteEvent = deleteEvent;
        vm.forms = {};
        vm.view = {};
        vm.view.edit = true;
        vm.eventId = $stateParams.id;
        vm.uploadFile = uploadFile;

        vm.event = eventsData[$stateParams.id];

        var backup = angular.copy(vm.event);

        var startDateString = vm.event.startDate
        var startDate = new Date(startDateString);
        vm.event.startDate = formatDate(startDate);

        var endDateString = vm.event.endDate
        var endDate = new Date(endDateString);
        vm.event.endDate = formatDate(endDate);

        function save(event) {
            var saveEvent = event;

            var startDateString = saveEvent.startDate;
            saveEvent.startDate = new Date(startDateString).getTime();

            var endDateString = saveEvent.endDate;
            saveEvent.endDate = new Date(endDateString).getTime();

            saveEvent.imageurl = saveEvent.imageurl.name;

            if (vm.forms.form.$valid) {
                eventsService.patchEvent(saveEvent).then(function (saveEvent) {
                    $state.go('events.list');
                });
            }
        }

        function cancel() {
            angular.copy(backup, vm.event);
            $state.go('events.list');
        }

        function deleteEvent(event) {
            eventsService.deleteEvent(event).then(function (event) {
                $state.go('events.list');
            })
        }

        function uploadFile(file) {
            vm.fileUpload = uploadService.postFile({
                data: { file: file },
            });
        }

        function formatDate(date) {
            var monthNames = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            return day + ' ' + monthNames[monthIndex] + ' ' + year;
        }

    });
'use strict';

angular.module('adminApp')
    .controller('CoreCtrl', function () { });

angular.module('adminApp')
    .controller('EventsListCtrl', function (eventsService, eventsData, $state) {
        var vm = this;
        vm.events = eventsData;
        vm.deleteEvent = deleteEvent;

        function deleteEvent(event, index) {

            eventsService.deleteEvent(event).then(function (event) {
                $state.go('events.list');
                eventsData.splice(index, 1);
            })
        }
    });


'use strict';

angular.module('adminApp')
    .config(function ($stateProvider) {
        $stateProvider
            .state('events', {
                abstract: true,
                url: '/events',
                resolve: {
                    eventsData: function (eventsService, $stateParams) {
                        return eventsService.getEvents($stateParams.id);
                    }
                }
            })
            .state('events.list', {
                url: '',
                controller: 'EventsListCtrl',
                controllerAs: 'vm',
                templateUrl: 'app/events/events-list.html',
            })
            .state('events.add', {
                url: '/add',
                controller: 'EventsAddCtrl',
                controllerAs: 'vm',
                templateUrl: 'app/events/events-add.html'
            })
            .state('events.edit', {
                url: '/:id/edit',
                controller: 'EventsEditCtrl',
                controllerAs: 'vm',
                templateUrl: 'app/events/events-edit.html'
            })
    });

'use strict';

angular.module('adminApp')
    .factory('eventsService', function ($http, apiUrl) {

        // Public API here
        return {
            getEvents: getEvents,
            getEvent: getEvent,
            postEvent: postEvent,
            patchEvent: patchEvent
        }

        function getEvents() {
            var getUrl = apiUrl + '/' + 'events';
            console.log('GET ' + getUrl);

            return $http.get(getUrl).then(function (response) {
                // console.log(response.data)
                return response.data;
            })
        }

        function getEvent(id) {
            var getUrl = apiUrl + '/' + 'events' + '/' + id;
            console.log('GET ID ' + getUrl);

            return $http.get(getUrl).then(function (response) {
                return response.data;
            })
        }

        function postEvent(event) {
            var getUrl = apiUrl + '/' + 'events';
            console.log('POST ' + getUrl);
            console.log('POST event ' + event);
            console.log(event);

            return $http.post(getUrl, event).then(function (response) {
                console.log('POST event response ' + response.data);
            })
        }

        function patchEvent(event) {
            var getUrl = apiUrl + '/' + 'events' + '/' + event.filename;
            console.log('PUT  ' + getUrl);

            return $http.patch(getUrl, event).then(function (response) {
                console.log(response.data);
            })
        }

    });


'use strict';

angular.module('Authentication')
    .controller('LoginController',
        ['$scope', '$rootScope', '$location', 'AuthenticationService', '$state',
            function ($scope, $rootScope, $location, AuthenticationService, $state) {
                // reset login status
                AuthenticationService.ClearCredentials();

                // $scope.email = 'test';
                // $scope.password = 'test';

                $scope.login = function () {
                    $scope.dataLoading = true;
                    AuthenticationService.SetCredentials($scope.email, $scope.password);
                    AuthenticationService.Login($scope.email, $scope.password, function (response) {
                        if (response.status === 200) {
                            AuthenticationService.SetCredentials($scope.email, $scope.password);
                            $location.path('/events');
                            console.log('login success')

                            // $stateProvider.$state.go('events.list');
                            // $stateProvider.state('events.list');
                            // $state('events.list');
                        } else {
                            $scope.error = response.data.message;
                            $scope.dataLoading = false;
                            console.log('login failed')
                        }
                    });
                };
            }]);

'use strict';

angular.module('Authentication')
    .factory('AuthenticationService',
        ['Base64', '$http', '$cookies', '$rootScope', '$timeout',
            function (Base64, $http, $cookies, $rootScope, $timeout) {
                var service = {};

                service.Login = function (email, password, callback) {

                    /* Dummy authentication for testing, uses $timeout to simulate api call
                     ----------------------------------------------*/
                    // $timeout(function () {
                    //     var response = { success: email === 'test' && password === 'test' };
                    //     if (!response.success) {
                    //         response.message = 'Email or password is incorrect';
                    //     }
                    //     callback(response);
                    // }, 1000);


                    /* Use this for real authentication
                     ----------------------------------------------*/
                    $http.post('/admin/auth/basic', { email: email, password: password })
                       .then(function (response) {
                           callback(response);
                       },
                       function (response) {
                           callback(response);
                       });

                };

                service.SetCredentials = function (email, password) {
                    var authdata = Base64.encode(email + ':' + password);

                    $rootScope.globals = {
                        currentUser: {
                            email: email,
                            authdata: authdata
                        }
                    };

                    $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
                    $cookies.put('globals', $rootScope.globals);
                };

                service.ClearCredentials = function () {
                    $rootScope.globals = {};
                    $cookies.remove('globals');
                    $http.defaults.headers.common.Authorization = 'Basic ';
                };

                return service;
            }])

    .factory('Base64', function () {
        /* jshint ignore:start */

        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

        return {
            encode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                do {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);

                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;

                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }

                    output = output +
                        keyStr.charAt(enc1) +
                        keyStr.charAt(enc2) +
                        keyStr.charAt(enc3) +
                        keyStr.charAt(enc4);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";
                } while (i < input.length);

                return output;
            },

            decode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
                var base64test = /[^A-Za-z0-9\+\/\=]/g;
                if (base64test.exec(input)) {
                    window.alert("There were invalid base64 characters in the input text.\n" +
                        "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                        "Expect errors in decoding.");
                }
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                do {
                    enc1 = keyStr.indexOf(input.charAt(i++));
                    enc2 = keyStr.indexOf(input.charAt(i++));
                    enc3 = keyStr.indexOf(input.charAt(i++));
                    enc4 = keyStr.indexOf(input.charAt(i++));

                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;

                    output = output + String.fromCharCode(chr1);

                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }

                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";

                } while (i < input.length);

                return output;
            }
        };

        /* jshint ignore:end */
    });
